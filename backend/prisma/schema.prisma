// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(50)
  email     String   @unique @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  content       Content[]
  notifications Notification[]
  followers     Follow[] @relation("UserFollowers")
  following     Follow[] @relation("UserFollowing")

  @@map("users")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int      @map("follower_id")
  followingId Int      @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId], name: "followerId_followingId")
  @@map("follows")
}

model Content {
  id        Int         @id @default(autoincrement())
  userId    Int         @map("user_id")
  type      ContentType
  title     String      @db.VarChar(200)
  body      String?
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@map("content")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  contentId Int      @map("content_id")
  type      String   @db.VarChar(50)
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum ContentType {
  BLOG
  JOB
  MESSAGE
}
